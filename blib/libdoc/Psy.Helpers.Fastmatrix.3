.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Psy::Helpers::Fastmatrix 3"
.TH Psy::Helpers::Fastmatrix 3 "2005-11-15" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Psy::Helpers::Fastmatrix 
.SH "VERSION"
.IX Header "VERSION"
version 0.02 \- Matt Yoder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Not used alone, but rather through its subclasses (e.g. fastfasta).
A class for loading and performing operations on simple sequence files (aligned or not).  
This is fast as in quickly derived code\- definitely \s-1NOT\s0 fast as in speed.  
.Sh "new"
.IX Subsection "new"
.Sh "seq"
.IX Subsection "seq"
Accessor for seq given a terminal label.
.Sh "seqLen"
.IX Subsection "seqLen"
Return length of the seq.
.Sh "numCols"
.IX Subsection "numCols"
\&\s-1NOT\s0 fast
.Sh "allSeqs"
.IX Subsection "allSeqs"
Return an array of all the sequences
.Sh "aTerminal"
.IX Subsection "aTerminal"
Returns (at \*(L"hash random\*(R" \s-1NOT\s0 \s-1TRUE\s0 \s-1RANDOM\s0) a legal terminal label.
.Sh "loopTer"
.IX Subsection "loopTer"
Returns arrary of terminal labels
.Sh "loopBySeqLength"
.IX Subsection "loopBySeqLength"
Returns arrary of terminal labels in order of sequence length
.Sh "loopGBnameHigher"
.IX Subsection "loopGBnameHigher"
Returns arrary of terminal labels in order of sequence length
.Sh "loopByGBnameThenSeqLen"
.IX Subsection "loopByGBnameThenSeqLen"
Returns arrary of terminal labels in order of GBname then sequence length
.Sh "seqObj"
.IX Subsection "seqObj"
Returns a pseudo-object for use in gbname (mimics the necessary bioperl seqobj structure), a cheat to use with gbname
.Sh "longestTer"
.IX Subsection "longestTer"
Returns an integer length of the longest terminal label
.Sh "deleteFixedGapPositions"
.IX Subsection "deleteFixedGapPositions"
Deletes fixed positions of kind \-char
.Sh "findOne"
.IX Subsection "findOne"
Searches all seqs for the passed regex, returning to \s-1STDOUT\s0 whether or not it was found.
.Sh "findMany"
.IX Subsection "findMany"
Returns true if all members of \-regexes are found in the seq for \-terminal.
.Sh "findManyOr"
.IX Subsection "findManyOr"
Returns true if any memeber of \-regexes is found in the seq for  \-terminal.
.Sh "boundOligo"
.IX Subsection "boundOligo"
Returns largest sequence bound by left most r1 and rightmost r2
.Sh "trimOligo"
.IX Subsection "trimOligo"
As bound Oligo but trims left and right of r1,r2
.Sh "out_boundMx"
.IX Subsection "out_boundMx"
Outputs a matrix that has only those sequences that are bound by \-left_bound and \-right_bound.
.Sh "out_Fasta"
.IX Subsection "out_Fasta"
Exports a fasta file.  Makes calls to genbank (but not by default)
.Sh "out_splitRegex"
.IX Subsection "out_splitRegex"
Exports a oneLine formatted matrix with lines split and gapped to the found regexes.
.Sh "out_splitRegexAligned"
.IX Subsection "out_splitRegexAligned"
As out_splitRegex, but places found blocks on top of each other.
.Sh "out_oneLine"
.IX Subsection "out_oneLine"
Exports a oneLine formatted matrix
.Sh "out_oneLineRegexCentered"
.IX Subsection "out_oneLineRegexCentered"
Outputs a matrix that with sequence data centered (if found) over \-regex.
.Sh "unfound"
.IX Subsection "unfound"
Compares a file containing a list of genbank Accessions to the current dataset, and writes a file of missing sequences
.Sh "clustalAlign"
.IX Subsection "clustalAlign"
Aligns the matrix, then reloads it to memory.  Must have clustalw/x in your path as 'clustalw'
.PP
Usage:
	\f(CW$foo\fR\->clustalAlign(
		'\-clustal_params' => ''
	)
.PP
Tested on clustalW 1.81.
.Sh "muscleAlign"
.IX Subsection "muscleAlign"
Aligns the matrix, then reloads it to memory.  Must have muscle in your path as 'muscle'
.PP
Usage:
	\f(CW$foo\fR\->clustalAlign(
		'\-clustal_params' => ''
	)
.Sh "merge"
.IX Subsection "merge"
Merges two 'Fast' based matrices.  Terminal data is \s-1OVERWRITTEN\s0 by matrix two's data if a terminal is present in both matrices.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&'Matt, \f(CW\*(C`<m{j}yoder@{tee}[aye](em)(you).domain4unis>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
<bug\-psy\-helpers\-fastmatrix@rt.cpan.org>, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Psy>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 'Matt, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
