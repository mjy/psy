.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Psy::Strings::Strings 3"
.TH Psy::Strings::Strings 3 "2008-06-08" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
Psy::Strings::Strings 
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick summary of what the module does.
.PP
Functions for use on strings.
.PP
.Vb 1
\&    use Psy::Strings::Strings;
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "maxBound"
.IX Subsection "maxBound"
returns the maximum length of a string (first match)
.Sh "regexSplit"
.IX Subsection "regexSplit"
Splits a string on \-regexes, inserting '\-insert' between them. 
.PP
Starts at begining of string, each successive regex must be found after the first.
.PP
.Vb 1
\&        &regexSplit('-str' => $s, '-regexes' => \e@r, '-insert' => '  ')
.Ve
.PP
I'm sure this could be done much more efficiently with look\-ahead/behind.
.Sh "reverseComp"
.IX Subsection "reverseComp"
A simple reverse compliment a string (\s-1DNA\s0).  Only handles '\s-1ACGTU\s0' and '[]' and '\e?' for regexes.  Mayhaps move to \s-1DNA\s0?
.Sh "gappedRe"
.IX Subsection "gappedRe"
Returns a single regex that should search against an set of  input patterns
.Sh "delFixedPositions"
.IX Subsection "delFixedPositions"
Given an array \-strings and a character \-char, deletes all fixed positions within that string for that character
.Sh "string2Blocks"
.IX Subsection "string2Blocks"
Given an array of integers return a block of each length
.Sh "pieces"
.IX Subsection "pieces"
duplicates string2Blocks in a cleaner way...doh
.Sh "lineWordMeta"
.IX Subsection "lineWordMeta"
returns a hash of 'word index' => { 'word_end', 'word_start', 'char_sum_start', 'char_sum_end', 'word_length' }
.PP
parameters are '\-line' , '\-offset' (added to char_sum_start and char_sum_end), '\-regex' (the word/pattern to search for)	
with help from http://perlmonks.org/index.pl?node_id=299194
.Sh "wordsFromLineMeta"
.IX Subsection "wordsFromLineMeta"
see lineWordMeta
returns a list of words (ordered) as demarked by a hash produced by &lineWordMeta
.Sh "arrayAsRange"
.IX Subsection "arrayAsRange"
.Sh "alphabetize"
.IX Subsection "alphabetize"
Returns a string containing the alphabetized (read 'sort') letters of the input string.
.PP
.Vb 1
\&        alphabetize('cba'); # returns abc
.Ve
.Sh "posOffsets"
.IX Subsection "posOffsets"
Returns an array containing the offset positions for each instance of \f(CW$chars\fR in \f(CW$string\fR 
zero = 1
.Sh "totalUniqueChars"
.IX Subsection "totalUniqueChars"
Pilfered from \*(L"http://www.newts.org/~troc/perl/uniqchar.perl\*(R"
returns the number of unique characters in a string	
=cut
.PP
sub totalUniqueChars () { 
	my ($str) = shift;
	use integer;
	my \f(CW%c\fR;
	for (split //, \f(CW$str\fR) {$c{$_}=undef} scalar keys \f(CW%c\fR 
}
.Sh "uniqueChars"
.IX Subsection "uniqueChars"
returns an array of the unique characters seen in a string
.Sh "uniqueCharsC"
.IX Subsection "uniqueCharsC"
returns \fIord()\fR instead of chars
.Sh "padleft"
.IX Subsection "padleft"
needs a list (text to pad, character to pad with (assuming single character!!), total length
.Sh "padright"
.IX Subsection "padright"
Returns a right padded string of a certain length
	&padright('foo', ' ', '24');
.Sh "lengthLongestString"
.IX Subsection "lengthLongestString"
length of the longest string in an array
.Sh "numMax"
.IX Subsection "numMax"
the max number in an array
.Sh "kword"
.IX Subsection "kword"
Returns a hash count of all strings of length \f(CW$len\fR occuring in \f(CW$str\fR, stepping by +1
.PP
This is equivalent to overlapping kwords? 
.Sh "f2d"
.IX Subsection "f2d"
Short form.  Return a sprintf to 2 decimals.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&'Matt, \f(CW\*(C`<m{j}yoder@{tee}[aye](em)(you).domain4unis>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-psy\-strings\-strings@rt.cpan.org\*(C'\fR, or through the web interface at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Psy>.
.PP
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Some here.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 'Matt, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
