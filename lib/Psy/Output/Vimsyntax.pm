package Psy::Dna::Vimsyntax;

use strict;
use warnings;
use Data::Dumper;

use vars qw(@ISA);

use Psy::Dna::Alphabet;
use Psy::Misc::Colour;

use Psy::Output::Output;

@ISA = qw(output);

# use column;

=head1 NAME

Psy::Dna::Vimsyntax

=head1 VERSION

Version 0.01

=cut

our $VERSION = '0.01';

=head1 SYNOPSIS

Output functions for a Psy object

=cut

our $OUT_DIR = "analyses/stats/column";
our $LEGAL_CHARS = Psy::Dna::Alphabet->new; # defaults to the RNA alphabet

sub process {
	my $self = shift;
	my %raw_params = @_;
	my %default_params = (
		'-type' => 'paired', # 'linear' - each successive block gets a different color, 'paired' - helices with 5' end in slice are exported and have same color
		'-color_nucs' => 0,  # whether to include individual nucleotide coloring
		'-min_length' => 5,
		'-legal_alphabet' => $LEGAL_CHARS,
		'-u2t' => 1, 	# translate U to T? ## not implemented??
	);

	# requires -mx

	$default_params{'-slice'} ||= $raw_params{'-mx'}->origSlice;	
	my %params = (%default_params, %raw_params);

	my $path = $OUT_DIR;
    if (defined $params{'-sub_path'}) {$path = $params{'-sub_path'}};
	$params{'-file_name'} ||= 'psy.vim';

 	print "PATH: $path/$params{'-file_name'}\n";

	my $data;					   
	$data = &output::mxData(%params); # get a basic data object

	my $mx = $params{'-mx'};

	# only include blocks greater than length $foo, this overwrites $data->{blocks}
	my @blks;

	foreach my $blk ($params{'-slice'}->loop("Blocks")) {
		my $cb = $mx->blk($blk);
		(($cb->blkLength >= $params{'-min_length'}) && ($cb->bracketed == 0)) && (push @blks, $blk)
	}

	$data->{blocks} = \@blks;
	
	if ($params{'-type'} eq 'paired') {
		$data->{regex} = sub {
							my $blk = shift;
							my $blk2 = $mx->{structures}->{'original'}->helix($blk) || 0; 
							$blk2 == 0 && return 0;
							my $r;
							my $col_obj = column->new($mx->blockColumnData('-blk' => $blk));
							my $col_obj2 = column->new($mx->blockColumnData('-blk' => $blk2));

							$r = '"'; $r .= $col_obj->vimRegex;
							$r .= '\|';
							$r .= $col_obj2->vimRegex; $r.= '"';
							return $r;
						};
	}
	else { # make it linear
		$data->{regex} = sub {
								my $blk = shift;
								my $col_obj = column->new($mx->blockColumnData('-blk' => $blk));
								'"', $col_obj->vimRegex, '"';
							};
	}
	
						
	# $data->{colour} = sub { my $blk = shift; &colour::hexFromRange($blk, $params{'-slice'}->total("Blocks"))}; # a hex representation, requires modification of __DATA__ to use
	$data->{colour2} = sub { my $blk = shift; &colour::textFromIndex($blk)};

	$data->{colornucs} = $params{'-color_nucs'};
	
	my $tt = Template->new($params{'-config'}); 
	$tt->process(\*DATA, $data, "$path/$params{'-file_name'}") || die 'died trying to process vimsyntax template'; 
	1;
}

1;

__DATA__
" Vim syntax file, generated by Psy
" Language: RNA...sort of
" Maintainer: Matt Yoder
" URL: http://hymenoptera.tamu.edu/rna
" generated on


" put this file in the syntax folder, its likely in a place LIKE this:
" mac os x - /Applications/vim.app/runtime/syntax
" dos: c:\program files\vim\vim62\syntax

" from the command this should turn it on
" set syntax=psy

" Remove any old syntax stuff that was loaded (5.x) or quit when a syntax file
" was already loaded (6.x).
if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

highlight Normal guibg=LightBlue guifg=White

" match nucleotides
[% IF colornucs %]
syntax match dnaa "[Aa]"
syntax match dnac "[Cc]"
syntax match dnag "[Gg]"
syntax match dnat "[tTuU]"
syntax match dnan "[nN]"
syntax match dnagap "[\[\]-]"
[% END %]

" blocks to match
[% FOREACH blk = blocks %][% do = regex(blk) %]
[% IF do %]syntax match blk[% blk %] [% do %][% END %][% END %]

" color for matches

[% IF colornucs %]
hi dnaa guifg=Green
hi dnac guifg=Blue
hi dnag guifg=Black
hi dnat guifg=Red
hi dnagap guifg=Black
hi dnan guifg=Purple gui=bold guibg=Orange
[% END %]

[% FOREACH blk = blocks %][% do = regex(blk) %]
[% IF do %]hi blk[% blk %] guibg=[% colour2(blk) %] guifg=Black gui=underline[% END %][% END %]

let b:current_syntax = "psy"
